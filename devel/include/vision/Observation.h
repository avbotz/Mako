// Generated by gencpp from file vision/Observation.msg
// DO NOT EDIT!


#ifndef VISION_MESSAGE_OBSERVATION_H
#define VISION_MESSAGE_OBSERVATION_H

#include <ros/service_traits.h>


#include <vision/ObservationRequest.h>
#include <vision/ObservationResponse.h>


namespace vision
{

struct Observation
{

typedef ObservationRequest Request;
typedef ObservationResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct Observation
} // namespace vision


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::vision::Observation > {
  static const char* value()
  {
    return "8a3ea109914aae69afdec8f4e1e8c6ca";
  }

  static const char* value(const ::vision::Observation&) { return value(); }
};

template<>
struct DataType< ::vision::Observation > {
  static const char* value()
  {
    return "vision/Observation";
  }

  static const char* value(const ::vision::Observation&) { return value(); }
};


// service_traits::MD5Sum< ::vision::ObservationRequest> should match 
// service_traits::MD5Sum< ::vision::Observation > 
template<>
struct MD5Sum< ::vision::ObservationRequest>
{
  static const char* value()
  {
    return MD5Sum< ::vision::Observation >::value();
  }
  static const char* value(const ::vision::ObservationRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::vision::ObservationRequest> should match 
// service_traits::DataType< ::vision::Observation > 
template<>
struct DataType< ::vision::ObservationRequest>
{
  static const char* value()
  {
    return DataType< ::vision::Observation >::value();
  }
  static const char* value(const ::vision::ObservationRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::vision::ObservationResponse> should match 
// service_traits::MD5Sum< ::vision::Observation > 
template<>
struct MD5Sum< ::vision::ObservationResponse>
{
  static const char* value()
  {
    return MD5Sum< ::vision::Observation >::value();
  }
  static const char* value(const ::vision::ObservationResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::vision::ObservationResponse> should match 
// service_traits::DataType< ::vision::Observation > 
template<>
struct DataType< ::vision::ObservationResponse>
{
  static const char* value()
  {
    return DataType< ::vision::Observation >::value();
  }
  static const char* value(const ::vision::ObservationResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // VISION_MESSAGE_OBSERVATION_H
